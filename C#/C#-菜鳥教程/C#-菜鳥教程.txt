https://www.runoob.com/csharp/csharp-tutorial.html

# 簡介
	重要工能
	布尔条件（Boolean Conditions）
	自动垃圾回收（Automatic Garbage Collection）
	标准库（Standard Library）
	组件版本（Assembly Versioning）
	属性（Properties）和事件（Events）
	委托（Delegates）和事件管理（Events Management）
	易于使用的泛型（Generics）
	索引器（Indexers）
	条件编译（Conditional Compilation）
	简单的多线程（Multithreading）
	LINQ 和 Lambda 表达式
	集成 Windows
# 環境
	.Net 框架（.Net Framework）
	.Net 框架是一个创新的平台，能帮您编写出下面类型的应用程序：
# 程序結構
	C# 是大小写敏感的。
	所有的语句和表达式必须以分号（;）结尾。
	程序的执行从 Main 方法开始。
	与 Java 不同的是，文件名可以不同于类的名称。
# 基本語法
	标识符
	标识符是用来识别类、变量、函数或任何其它用户定义的项目。在 C# 中，类的命名必须遵循如下基本规则：
	标识符必须以字母、下划线或 @ 开头，后面可以跟一系列的字母、数字（ 0 - 9 ）、下划线（ _ ）、@。
	标识符中的第一个字符不能是数字。
	标识符必须不包含任何嵌入的空格或符号，比如 ? - +! # % ^ & * ( ) [ ] { } . ; : " ' / \。
	标识符不能是 C# 关键字。除非它们有一个 @ 前缀。 例如，@if 是有效的标识符，但 if 不是，因为 if 是关键字。
	标识符必须区分大小写。大写字母和小写字母被认为是不同的字母。
	不能与C#的类库名称相同。
	C# 关键字
	https://www.runoob.com/csharp/csharp-basic-syntax.html
# 數據類型
	bool	布尔值	             True 或 False	False
	byte	8 位无符号整数		  0 到 255	0
	char	16 位 Unicode 字符	U +0000 到 U +ffff	'\0'
	decimal	128 位精确的十进制值，28-29 有效位数	(-7.9 x 1028 到 7.9 x 1028) / 100 到 28	0.0M
	double	64 位双精度浮点型	(+/-)5.0 x 10-324 到 (+/-)1.7 x 10308	0.0D
	float	32 位单精度浮点型	-3.4 x 1038 到 + 3.4 x 1038	0.0F
	int	    32 位有符号整数类型	-2,147,483,648 到 2,147,483,647	0
	long	64 位有符号整数类型	-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807	0L
	sbyte	8 位有符号整数类型	-128 到 127	0
	short	16 位有符号整数类型	-32,768 到 32,767	0
	uint	32 位无符号整数类型	0 到 4,294,967,295	0
	ulong	64 位无符号整数类型	0 到 18,446,744,073,709,551,615	0
	ushort	16 位无符号整数类型	0 到 65,535	0
	
	引用类型（Reference types）
	object obj;
	obj = 100; // 这是装箱
	动态（Dynamic）类型
	dynamic d = 20;
	字符串（String）类型
	String str = "runoob.com";
	指针类型（Pointer types）
	char* cptr;
	int* iptr;
# 類型轉換
	double d = 5673.74;
    int i;
	// 强制转换 double 为 int
	i = (int)d;
	To ***
# C#變量
	C# 中的变量定义
	<data_type> <variable_list>;
	int i, j, k;
	C# 中的变量初始化
	<data_type> <variable_name> = value;
	int d = 3, f = 5;    /* 初始化 d 和 f. */
	! 正确地初始化变量是一个良好的编程习惯，否则有时程序会产生意想不到的结果。
# C#常量
	常量是固定值，程序执行期间不会改变。常量可以是任何基本数据类型，比如整数常量、浮点常量、字符常量或者字符串常量，还有枚举常量。
	常量可以被当作常规的变量，只是它们的值在定义后不能被修改。
	定义常量
	常量是使用 const 关键字来定义的 。定义一个常量的语法如下：
	const <data_type> <constant_name> = value;
	string a = "hello, world";                  // hello, world
# C#運算符
	https://www.runoob.com/csharp/csharp-operators.html
	範例部分
	关系运算符
	==	检查两个操作数的值是否相等，如果相等则条件为真。	(A == B) 不为真。
	!=	检查两个操作数的值是否相等，如果不相等则条件为真。	(A != B) 为真。
	>	检查左操作数的值是否大于右操作数的值，如果是则条件为真。	(A > B) 不为真。
	<	检查左操作数的值是否小于右操作数的值，如果是则条件为真。	(A < B) 为真。
	>=	检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。	(A >= B) 不为真。
	<=	检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。	(A <= B) 为真。
	位运算符 二進位 不大理解
	int a = 60;            /* 60 = 0011 1100 */ 
	&	如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。	(A & B) 将得到 12，即为 0000 1100 
	c = a & b;           /* 12 = 0000 1100 */
    Console.WriteLine("Line 1 - c 的值是 {0}", c );
	Line 1 - c 的值是 12
# C#判斷
	判断语句
	if 语句	一个 if 语句 由一个布尔表达式后跟一个或多个语句组成。
	if...else 语句	一个 if 语句 后可跟一个可选的 else 语句，else 语句在布尔表达式为假时执行。
	嵌套 if 语句	您可以在一个 if 或 else if 语句内使用另一个 if 或 else if 语句。
	switch 语句	一个 switch 语句允许测试一个变量等于多个值时的情况。
	嵌套 switch 语句	您可以在一个 switch 语句内使用另一个 switch 语句。
# C#循環
	循环类型
	while 循环	当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。
	for/foreach 循环	多次执行一个语句序列，简化管理循环变量的代码。
	do...while 循环	除了它是在循环主体结尾测试条件外，其他与 while 语句类似。
	嵌套循环	您可以在 while、for 或 do..while 循环内使用一个或多个循环。
	循环控制语句
	break 语句	终止 loop 或 switch 语句，程序流将继续执行紧接着 loop 或 switch 的下一条语句。
	continue 语句	引起循环跳过主体的剩余部分，立即重新开始测试条件。
# C#封裝
	public：所有对象都可以访问；
	private：对象本身在对象内部可以访问；
	protected：只有该类对象及其子类对象可以访问
	internal：同一个程序集的对象可以访问；
	protected internal：访问限于当前程序集或派生自包含类的类型。
# C#方法
	public             int           FindMax      (int num1, int num2)
	<Access Specifier> <Return Type> <Method Name>(Parameter List)
	{
   		Method Body
	}
	*Access Specifier：访问修饰符，这个决定了变量或方法对于另一个类的可见性。
	*Return type：返回类型，一个方法可以返回一个值。返回类型是方法返回的值的数据类型。如果方法不返回任何值，则返回类型为 void。
	*Method name：方法名称，是一个唯一的标识符，且是大小写敏感的。它不能与类中声明的其他标识符相同。
	*Parameter list：参数列表，使用圆括号括起来，该参数是用来传递和接收方法的数据。参数列表是指方法的参数类型、顺序和数量。参数是可选的，也就是说，一个方法可能不包含参数。
	*Method body：方法主体，包含了完成任务所需的指令集。
	
	递归方法调用
	圖
# C#可空類型-Nullable
	C# 单问号 ? 与 双问号 ??
	int? i = 3;
	Nullable<int> i = new Nullable<int>(3);
	等於
	int i; //默认值0
	int? ii; //默认值null

	exsample:
	    int? num1 = null;
        int? num2 = 45;
        double? num3 = new double?();
        double? num4 = 3.14157;
         
        bool? boolval = new bool?();

        // 显示值
         
        Console.WriteLine("显示可空类型的值： {0}, {1}, {2}, {3}",
                            num1, num2, num3, num4);
        Console.WriteLine("一个可空的布尔值： {0}", boolval);
        Console.ReadLine();
	output:
	显示可空类型的值： , 45,  , 3.14157
	一个可空的布尔值：
# C#數組 Array
	datatype[] arrayName;
# C#字串 String
# C#結構體 Struct
	exsample:
	struct Books
	{
		public string title;
		public string author;
		public string subject;
		public int book_id;
	};  

      Books Book1;        /* 声明 Book1，类型为 Books */
      Books Book2;        /* 声明 Book2，类型为 Books */

      /* book 1 详述 */
      Book1.title = "C Programming";
      Book1.author = "Nuha Ali";
      Book1.subject = "C Programming Tutorial";
      Book1.book_id = 6495407;

      /* book 2 详述 */
      Book2.title = "Telecom Billing";
      Book2.author = "Zara Ali";
      Book2.subject =  "Telecom Billing Tutorial";
      Book2.book_id = 6495700;
	output:
		Book 1 title : C Programming
		Book 1 author : Nuha Ali
		Book 1 subject : C Programming Tutorial
		Book 1 book_id : 6495407
		Book 2 title : Telecom Billing
		Book 2 author : Zara Ali
		Book 2 subject : Telecom Billing Tutorial
		Book 2 book_id : 6495700

	C#結構的特點
	结构可带有方法、字段、索引、属性、运算符方法和事件。
	结构可定义构造函数，但不能定义析构函数。但是，您不能为结构定义无参构造函数。无参构造函数(默认)是自动定义的，且不能被改变。
	*与类不同，结构不能继承其他的结构或类。
	*结构不能作为其他结构或类的基础结构。
	结构可实现一个或多个接口。
	*结构成员不能指定为 abstract、virtual 或 protected。
	*当您使用 New 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。与类不同，结构可以不使用 New 操作符即可被实例化。
	*如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用。
	类 vs 结构
	类是引用类型，结构是值类型。
	结构不支持继承。
	结构不能声明默认的构造函数

	1、结构体中声明的字段无法赋予初值，类可以:
	2、结构体的构造函数中，必须为结构体所有字段赋值，类的构造函数无此限制:
# C#列舉 Enum
	類似go iota
	enum <enum_name>
	{ 
		enumeration list 
	};
	enum_name 指定枚举的类型名称。
	enumeration list 是一个用逗号分隔的标识符列表。
	exsample:
	enum Day { Sun, Mon, Tue, Wed, Thu, Fri, Sat };
	int x = (int)Day.Sun;
	int y = (int)Day.Fri;
	Console.WriteLine("Sun = {0}", x);
	Console.WriteLine("Fri = {0}", y);
	output:
	Sun = 0
	Fri = 5
# C#類 Class
	Class的定義
	https://www.runoob.com/csharp/csharp-class.html

	public			   class  Box
	<access specifier> class  class_name
	{
		// member variables
		public			   int		   length
		<access specifier> <data type> variable1;
		<access specifier> <data type> variable2;
		...
		<access specifier> <data type> variableN;

		// member methods
		public			   void。		 get_size(i int)
		<access specifier> <return type> method1(parameter_list)
		{
			// method body
		}
		<access specifier> <return type> method2(parameter_list)
		{
			// method body
		}
		...
		<access specifier> <return type> methodN(parameter_list)
		{
			// method body
		}
	}

	*访问标识符 <access specifier> 指定了对类及其成员的访问规则。如果没有指定，则使用默认的访问标识符。类的默认访问标识符是 internal，成员的默认访问标识符是 private。
	internal 內部類型或成員只能在相同組件的檔案內存取
	*数据类型 <data type> 指定了变量的类型，返回类型 <return type> 指定了返回的方法返回的数据类型。
	*如果要访问类的成员，你要使用点（.）运算符。
	*点运算符链接了对象的名称和成员的名称。
# C#繼承
	exsample:
	基底
	class Shape
	{
		...
	}
	繼承者
	class Rectangle : Shape
	{
	...
	}
	C# 基底類別初始化 派生 : base 圖
	C# 無法多重繼承 可以使用多個接口(interface)解決此問題
# C#多態性
	静态多态性中，函数的响应是在编译时发生的。
	在动态多态性中，函数的响应是在运行时发生的。
	多态就是同一个接口，使用不同的实例而执行不同操作
	
	函数重载
		exsample:
	    public int Add(int a, int b, int c)  
        {  
            return a + b + c;  
        }  
        public int Add(int a, int b)  
        {  
            return a + b;  
        }

		// 投進的類型 對應的fucn()投幣口 就不同
		TestData dataClass = new TestData();
		int add1 = dataClass.Add(1, 2);  
		int add2 = dataClass.Add(1, 2, 3);

		Console.WriteLine("add1 :" + add1);
		Console.WriteLine("add2 :" + add2);
	
	動態多態性
	A***** class = 抽象類 NOTE..
	強制***一定要有 func *** ()
	func()實作內容交給繼承的物件自己去定義
	用override 自己定義內容 END
	
	virtual class  = 虛方法
	当有一个定义在类中的函数需要在继承类中实现时，可以使用虚方法。
	虚方法是使用关键字 virtual 声明的。
	虚方法可以在不同的继承类中有不同的实现。
	对虚方法的调用是在运行时发生的。
	动态多态性是通过 抽象类 和 虚方法 实现的。
	以下实例创建了 Shape 基类，
	并创建派生类 Circle、 Rectangle、Triangle， Shape 类
	提供一个名为 Draw 的虚拟方法，在每个派生类中重写该方法以绘制该类的指定形状。

	用override 自己定義內容 END

# C#運算符重載
	圖
	與多載相同,自定義內容 operator 後 運算子 (容器) 來設定符合條件
	通过关键字 operator 后跟运算符的符号来定义的

	結構
	public static result-type operator unary-operator ( op-type operand )
	public static result-type operator binary-operator ( op-type operand, op-type2 operand2 )
	public static implicit operator conv-type-out ( conv-type-in operand )
	public static explicit operator conv-type-out ( conv-type-in operand )
	result-type 运算符的结果类型。
	unary-operator 下列运算符之一：+ - ! ~ ++ — true false
	op-type 第一个（或唯一一个）参数的类型。
	operand 第一个（或唯一一个）参数的名称。
	binary-operator 其中一个：+ - * / % & | ^ << >> == != > < >= <=
	op-type2 第二个参数的类型。
	operand2 第二个参数的名称。
	conv-type-out 类型转换运算符的目标类型。
	conv-type-in 类型转换运算符的输入类型。

	可重载和不可重载运算符
	下表描述了 C# 中运算符重载的能力：
	运算符	描述
	+, -, !, ~, ++, --	这些一元运算符只有一个操作数，且可以被重载。
	+, -, *, /, %	这些二元运算符带有两个操作数，且可以被重载。
	==, !=, <, >, <=, >=	这些比较运算符可以被重载。
	&&, ||	这些条件逻辑运算符不能被直接重载。
	+=, -=, *=, /=, %=	这些赋值运算符不能被重载。
	=, ., ?:, ->, new, is, sizeof, typeof	这些运算符不能被重载。

# C#接口Interface
	圖
	接口定义了所有类继承接口时应遵循的语法合同。接口定义了语法合同 "是什么" 部分，派生类定义了语法合同 "怎么做" 部分。
	接口定义了属性、方法和事件，这些都是接口的成员。接口只包含了成员的声明。成员的定义是派生类的责任。接口提供了派生类应遵循的标准结构。
	接口使得实现接口的类或结构在形式上保持一致。

	抽象类在某种程度上与接口类似，但是，它们大多只是用在当只有少数方法由基类声明由派生类实现时。

	接口继承: InterfaceInheritance.cs
	以下实例定义了两个接口 IMyInterface 和 IParentInterface。

	如果一个接口继承其他接口，那么实现类或结构就需要实现所有接口的成员。

	以下实例 IMyInterface 继承了 IParentInterface 接口，因此接口实现类必须实现 MethodToImplement() 和 ParentInterfaceMethod() 方法：
	
	exsample:
	using System;

	interface IParentInterface
	{
		void ParentInterfaceMethod();
	}

	interface IMyInterface : IParentInterface
	{
		void MethodToImplement();
	}
	
	class InterfaceImplementer : IMyInterface
	{
		static void Main()
		{
			InterfaceImplementer iImp = new InterfaceImplementer();
			iImp.MethodToImplement();
			iImp.ParentInterfaceMethod();
		}

		public void MethodToImplement()
		{
			Console.WriteLine("MethodToImplement() called.");
		}

		public void ParentInterfaceMethod()
		{
			Console.WriteLine("ParentInterfaceMethod() called.");
		}
	}

# C#命名空間namespace
	圖
	定義命名空間
	namespace namespace_name
	{
	// 代码声明
	}

	using 关键字
	using 关键字表明程序使用的是给定命名空间中的名称。
	exsample:
	using System;
	using first_space;
	using second_space;

	namespace first_space
	{
		class abc
		{
			public void func()
			{
				Console.WriteLine("Inside first_space");
			}
		}
	}

	嵌套命名空间
	命名空间可以被嵌套，即您可以在一个命名空间内定义另一个命名空间，如下所示：
	namespace namespace_name1 
	{
		// 代码声明
		namespace namespace_name2 
		{
			// 代码声明
		}
	}
